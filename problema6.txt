// PROBLEMA 6: √ÅRVORE BIN√ÅRIA DE BUSCA (BST) - VERS√ÉO EDUCACIONAL E INTERATIVA
// =================================================================
// M√ìDULO A: DEFINI√á√ÉO DA ESTRUTURA DA √ÅRVORE
// =================================================================

// Estrutura do n√≥ da √°rvore bin√°ria de busca
// Cada n√≥ cont√©m uma chave inteira e ponteiros para sub√°rvores esquerda e direita
struct TreeNode {
    Int key;           // Chave do n√≥ (valor inteiro)
    TreeNode left;     // Ponteiro para sub√°rvore esquerda
    TreeNode right;    // Ponteiro para sub√°rvore direita
};

// =================================================================
// M√ìDULO B: OPERA√á√ïES FUNDAMENTAIS DA BST
// =================================================================

// Fun√ß√£o de inser√ß√£o recursiva na √°rvore bin√°ria de busca
// Mant√©m a propriedade BST: esquerda < n√≥ < direita
// Retorna a raiz da √°rvore (possivelmente modificada)
TreeNode insert(TreeNode root, Int value) {
    // Caso base: √°rvore vazia - criar novo n√≥
    if (root == null) {
        TreeNode new_node <- NEW TreeNode;
        new_node.key <- value;
        new_node.left <- null;
        new_node.right <- null;
        print_string "   ‚úÖ N√≥ ";
        print value;
        print_string " inserido como nova raiz/folha";
        return new_node;
    }
    
    // Inser√ß√£o √† esquerda (valor menor)
    if (value < root.key) {
        print_string "   üîÑ ";
        print value;
        print_string " < ";
        print root.key;
        print_string " ‚Üí inserindo √† esquerda";
        root.left <- insert(root.left, value);
    }
    
    // Inser√ß√£o √† direita (valor maior)
    if (value > root.key) {
        print_string "   üîÑ ";
        print value;
        print_string " > ";
        print root.key;
        print_string " ‚Üí inserindo √† direita";
        root.right <- insert(root.right, value);
    }
    
    // Valor igual - n√£o inserir duplicatas
    if (value == root.key) {
        print_string "   ‚ö†Ô∏è  Valor ";
        print value;
        print_string " j√° existe - ignorando duplicata";
    }
    
    return root;
}

// =================================================================
// M√ìDULO C: OPERA√á√ïES DE BUSCA (M√çNIMO E M√ÅXIMO)
// =================================================================

// Busca da chave m√≠nima (sempre na sub√°rvore esquerda)
// Navega recursivamente √† esquerda at√© encontrar folha
Unit find_min(TreeNode node, Int level) {
    if (node == null) {
        print_string "‚ùå √Årvore vazia - sem valor m√≠nimo";
        return;
    }
    
    print_string "üîç N√≠vel ";
    print level;
    print_string ": examinando n√≥ ";
    print node.key;
    
    // Caso base: n√£o h√° mais n√≥s √† esquerda
    if (node.left == null) {
        print_string "";
        print_string "üéØ CHAVE M√çNIMA ENCONTRADA:";
        print_string "   Valor: ";
        print node.key;
        print_string "   N√≠vel: ";
        print level;
        print_string "   (Extremo esquerdo da √°rvore)";
        return;
    }
    
    print_string " ‚Üí continuando √† esquerda";
    find_min(node.left, level + 1);
}

// Busca da chave m√°xima (sempre na sub√°rvore direita)
// Navega recursivamente √† direita at√© encontrar folha
Unit find_max(TreeNode node, Int level) {
    if (node == null) {
        print_string "‚ùå √Årvore vazia - sem valor m√°ximo";
        return;
    }
    
    print_string "üîç N√≠vel ";
    print level;
    print_string ": examinando n√≥ ";
    print node.key;
    
    // Caso base: n√£o h√° mais n√≥s √† direita
    if (node.right == null) {
        print_string "";
        print_string "üéØ CHAVE M√ÅXIMA ENCONTRADA:";
        print_string "   Valor: ";
        print node.key;
        print_string "   N√≠vel: ";
        print level;
        print_string "   (Extremo direito da √°rvore)";
        return;
    }
    
    print_string " ‚Üí continuando √† direita";
    find_max(node.right, level + 1);
}

// =================================================================
// M√ìDULO D: OPERA√á√ïES DE IMPRESS√ÉO E VISUALIZA√á√ÉO
// =================================================================

// Fun√ß√£o auxiliar para calcular a altura da √°rvore
// Altura = m√°ximo caminho da raiz at√© uma folha
Int get_height(TreeNode node) {
    if (node == null) {
        return 0;
    }
    
    Int left_height <- get_height(node.left);
    Int right_height <- get_height(node.right);
    
    if (left_height > right_height) {
        return left_height + 1;
    }
    
    return right_height + 1;
}

// Imprime todos os n√≥s de um n√≠vel espec√≠fico
// Usado pela fun√ß√£o de impress√£o por n√≠veis
Unit print_given_level(TreeNode root, Int level) {
    if (root == null) {
        return;
    }
    
    if (level == 1) {
        print_string "  ";
        print root.key;
        return;
    }
    
    print_given_level(root.left, level - 1);
    print_given_level(root.right, level - 1);
}

// Impress√£o da √°rvore por n√≠veis (level-order traversal)
// Exibe a estrutura hier√°rquica da BST
Unit print_level_order(TreeNode root) {
    if (root == null) {
        print_string "‚ùå √Årvore vazia - nada para imprimir";
        return;
    }
    
    Int height <- get_height(root);
    Int i <- 1;
    
    print_string "üìä ESTRUTURA DA √ÅRVORE (por n√≠veis):";
    print_string "   Altura total: ";
    print height;
    print_string " n√≠veis";
    print_string "";
    
    while (i <= height) {
        print_string "üå≥ N√≠vel ";
        print i;
        print_string ":";
        print_given_level(root, i);
        print_string "";
        i <- i + 1;
    }
    
    print_string "‚úÖ Visualiza√ß√£o completa da BST finalizada";
}

// =================================================================
// PROGRAMA PRINCIPAL - DEMONSTRA√á√ÉO INTERATIVA
// =================================================================

Int main() {
    // =============================================================
    // CABE√áALHO E APRESENTA√á√ÉO DO PROGRAMA
    // =============================================================
    
    print_string "==================================================================";
    print_string "         √ÅRVORE BIN√ÅRIA DE BUSCA (BST) - LINGUAGEM DIMOZA";
    print_string "==================================================================";
    print_string "";
    
    // =============================================================
    // OPERA√á√ÉO A: CONSTRU√á√ÉO DA BST COM ENTRADA INTERATIVA
    // =============================================================
    
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "                  OPERA√á√ÉO A: CONSTRU√á√ÉO DA BST";
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "";
    
    TreeNode root <- null;
    Int quantidade;
    Int i;
    
    print_string "üî¢ Digite a quantidade de valores a inserir na BST:";
    Float entrada_qtd <- read();
    quantidade <- entrada_qtd;
    
    if (quantidade <= 0) {
        print_string "‚ùå ERRO: Quantidade deve ser positiva!";
        print_string "Programa encerrado.";
        return 1;
    }
    
    print_string "";
    print_string "üìù Digite os ";
    print quantidade;
    print_string " valores inteiros (um por linha):";
    print_string "";
    
    i <- 1;
    while (i <= quantidade) {
        print_string "üî¢ Valor ";
        print i;
        print_string ": ";
        Float entrada_valor <- read();
        Int valor <- entrada_valor;
        
        print_string "üå± Inserindo ";
        print valor;
        print_string " na BST...";
        root <- insert(root, valor);
        print_string "";
        
        i <- i + 1;
    }
    
    print_string "‚úÖ BST constru√≠da com sucesso!";
    print_string "";
    
    // =============================================================
    // OPERA√á√ÉO B: BUSCA DA CHAVE M√çNIMA
    // =============================================================
    
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "                  OPERA√á√ÉO B: BUSCA DA CHAVE M√çNIMA";
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "";
    print_string "üîç Buscando a chave m√≠nima (navega√ß√£o √† esquerda)...";
    print_string "";
    
    find_min(root, 1);
    print_string "";
    
    // =============================================================
    // OPERA√á√ÉO C: BUSCA DA CHAVE M√ÅXIMA
    // =============================================================
    
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "                  OPERA√á√ÉO C: BUSCA DA CHAVE M√ÅXIMA";
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "";
    print_string "üîç Buscando a chave m√°xima (navega√ß√£o √† direita)...";
    print_string "";
    
    find_max(root, 1);
    print_string "";
    
    // =============================================================
    // OPERA√á√ÉO D: IMPRESS√ÉO DA √ÅRVORE POR N√çVEIS
    // =============================================================
    
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "                  OPERA√á√ÉO D: VISUALIZA√á√ÉO DA BST";
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "";
    print_string "üå≥ Imprimindo √°rvore bin√°ria de busca por n√≠veis...";
    print_string "";
    
    print_level_order(root);
    print_string "";
    
    // =============================================================
    // FINALIZA√á√ÉO DO PROGRAMA
    // =============================================================
    
    print_string "==================================================================";
    print_string "                      PROGRAMA FINALIZADO";
    print_string "==================================================================";
    print_string "";
    print_string "‚úÖ Todas as opera√ß√µes da BST foram executadas com sucesso!";

    
    return 0;
}
