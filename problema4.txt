// PROBLEMA 4: N√öMEROS RACIONAIS
// =======================================

Unit criar_racional(Int a, Int b, ref Int numerador, ref Int denominador) {
    // Valida denominador n√£o-zero e cria n√∫mero racional
    if (b == 0) {
        print_string "‚ùå ERRO: Denominador n√£o pode ser zero!";
        print_string "   Criando racional padr√£o: 0/1";
        numerador <- 0;
        denominador <- 1;
    }
    if (b != 0) {
        numerador <- a;
        denominador <- b;
        
        // Normaliza√ß√£o: garantir denominador sempre positivo
        if (denominador < 0) {
            numerador <- 0 - numerador;
            denominador <- 0 - denominador;
        }
        
        print_string "‚úÖ Racional criado com sucesso!";
    }
}

// =================================================================
// M√ìDULO B: COMPARA√á√ÉO DE IGUALDADE
// =================================================================

Unit comparar_igualdade(Int num1, Int den1, Int num2, Int den2, ref Int resultado) {
    // Compara usando produto cruzado: num1*den2 == num2*den1
    // M√©todo eficiente que evita convers√£o para decimal
    Int produto1 <- num1 * den2;
    Int produto2 <- num2 * den1;
    
    if (produto1 == produto2) {
        resultado <- 1;
        print_string "‚úÖ Os n√∫meros racionais s√£o iguais";
    }
    if (produto1 != produto2) {
        resultado <- 0;
        print_string "‚ÑπÔ∏è  Os n√∫meros racionais s√£o diferentes";
    }
}

// =================================================================
// M√ìDULO C: OPERA√á√ïES ARITM√âTICAS COM N√öMEROS RACIONAIS
// =================================================================

// C.1: SOMA DE N√öMEROS RACIONAIS
Unit somar_racionais(Int num1, Int den1, Int num2, Int den2, ref Int result_num, ref Int result_den) {
    // F√≥rmula: a/b + c/d = (a*d + c*b)/(b*d)
    result_num <- (num1 * den2) + (num2 * den1);
    result_den <- den1 * den2;
    
    // Garantir denominador positivo
    if (result_den < 0) {
        result_num <- 0 - result_num;
        result_den <- 0 - result_den;
    }
    print_string "‚ûï Soma calculada";
}

// C.2: NEGA√á√ÉO DE N√öMERO RACIONAL
Unit negar_racional(Int num, Int den, ref Int result_num, ref Int result_den) {
    // F√≥rmula: -(a/b) = (-a)/b
    result_num <- 0 - num;
    result_den <- den;
    print_string "‚ûñ Nega√ß√£o calculada";
}

// C.3: SUBTRA√á√ÉO DE N√öMEROS RACIONAIS
Unit subtrair_racionais(Int num1, Int den1, Int num2, Int den2, ref Int result_num, ref Int result_den) {
    // F√≥rmula: a/b - c/d = (a*d - c*b)/(b*d)
    result_num <- (num1 * den2) - (num2 * den1);
    result_den <- den1 * den2;
    
    // Garantir denominador positivo
    if (result_den < 0) {
        result_num <- 0 - result_num;
        result_den <- 0 - result_den;
    }
    print_string "‚ûñ Subtra√ß√£o calculada";
}

// C.4: MULTIPLICA√á√ÉO DE N√öMEROS RACIONAIS
Unit multiplicar_racionais(Int num1, Int den1, Int num2, Int den2, ref Int result_num, ref Int result_den) {
    // F√≥rmula: (a/b) * (c/d) = (a*c)/(b*d)
    result_num <- num1 * num2;
    result_den <- den1 * den2;
    
    // Garantir denominador positivo
    if (result_den < 0) {
        result_num <- 0 - result_num;
        result_den <- 0 - result_den;
    }
    print_string "‚úñÔ∏è  Multiplica√ß√£o calculada";
}

// C.5: INVERSO DE N√öMERO RACIONAL
Unit inverter_racional(Int num, Int den, ref Int result_num, ref Int result_den) {
    // F√≥rmula: 1/(a/b) = b/a (desde que a ‚â† 0)
    if (num == 0) {
        print_string "‚ùå ERRO: N√£o √© poss√≠vel calcular o inverso de zero!";
        print_string "   Retornando racional padr√£o: 0/1";
        result_num <- 0;
        result_den <- 1;
    }
    if (num != 0) {
        result_num <- den;
        result_den <- num;
        
        // Garantir denominador positivo
        if (result_den < 0) {
            result_num <- 0 - result_num;
            result_den <- 0 - result_den;
        }
        print_string "üîÑ Inverso calculado";
    }
}

// C.6: DIVIS√ÉO DE N√öMEROS RACIONAIS
Unit dividir_racionais(Int num1, Int den1, Int num2, Int den2, ref Int result_num, ref Int result_den) {
    // F√≥rmula: (a/b) √∑ (c/d) = (a/b) * (d/c) = (a*d)/(b*c)
    if (num2 == 0) {
        print_string "‚ùå ERRO: Divis√£o por zero n√£o √© permitida!";
        print_string "   Retornando racional padr√£o: 0/1";
        result_num <- 0;
        result_den <- 1;
    }
    if (num2 != 0) {
        result_num <- num1 * den2;
        result_den <- den1 * num2;
        
        // Garantir denominador positivo
        if (result_den < 0) {
            result_num <- 0 - result_num;
            result_den <- 0 - result_den;
        }
        print_string "‚ûó Divis√£o calculada";
    }
}

// =================================================================
// M√ìDULO D: UTILIT√ÅRIO DE IMPRESS√ÉO
// =================================================================

Unit imprimir_racional(Int num, Int den) {
    // Exibe o n√∫mero racional de forma elegante
    if (den == 1) {
        // N√∫mero inteiro - n√£o mostrar denominador
        print num;
    }
    if (den != 1) {
        // Fra√ß√£o - mostrar num/den
        print num;
        print_string "/";
        print den;
    }
}

// =================================================================
// PROGRAMA PRINCIPAL - DEMONSTRA√á√ÉO INTERATIVA
// =================================================================

Unit main() {
    // =============================================================
    // CABE√áALHO E APRESENTA√á√ÉO DO PROGRAMA
    // =============================================================
    
    print_string "==================================================================";
    print_string "         N√öMEROS RACIONAIS - LINGUAGEM DIMOZA";
    print_string "==================================================================";
    
    // =============================================================
    // ENTRADA INTERATIVA DOS DADOS
    // =============================================================
    
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "                    ENTRADA DOS N√öMEROS RACIONAIS";
    print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
    print_string "";
    print_string "üìù Digite os dados dos n√∫meros racionais:";
    print_string "";
    
    print_string "üî¢ PRIMEIRO N√öMERO RACIONAL:";
    print_string "Digite o numerador:";
    Float entrada1 <- read();
    Int r1_num <- entrada1;
    
    print_string "Digite o denominador:";
    Float entrada2 <- read();
    Int r1_den <- entrada2;
    
    print_string "";
    print_string "üî¢ SEGUNDO N√öMERO RACIONAL:";
    print_string "Digite o numerador:";
    Float entrada3 <- read();
    Int r2_num <- entrada3;
    
    print_string "Digite o denominador:";
    Float entrada4 <- read();
    Int r2_den <- entrada4;
    
    // =============================================================
    // CONFIRMA√á√ÉO DOS DADOS INSERIDOS
    // =============================================================
    
    print_string "";
    print_string "üìã CONFIRMA√á√ÉO DOS DADOS INSERIDOS:";
    print_string "   Primeiro racional:  ";
    print r1_num;
    print_string "/";
    print r1_den;
    print_string "   Segundo racional:   ";
    print r2_num;
    print_string "/";
    print r2_den;
    print_string "";
    
    // =============================================================
    // VALIDA√á√ÉO INICIAL DOS DENOMINADORES
    // =============================================================
    
    print_string "üîç VALIDANDO DENOMINADORES...";
    print_string "";
    
    Int dados_validos <- 1;
    
    // Verifica√ß√£o dos denominadores
    if (r1_den == 0) {
        print_string "‚ùå ERRO: Primeiro denominador n√£o pode ser zero!";
        dados_validos <- 0;
    }
    if (r2_den == 0) {
        print_string "‚ùå ERRO: Segundo denominador n√£o pode ser zero!";
        dados_validos <- 0;
    }
    
    if (dados_validos == 1) {
        print_string "‚úÖ Denominadores validados com sucesso!";
        print_string "";
        // =============================================================
        // M√ìDULO A: CRIA√á√ÉO DOS N√öMEROS RACIONAIS
        // =============================================================
        
        print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
        print_string "                  M√ìDULO A: CRIA√á√ÉO DE RACIONAIS";
        print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
        print_string "";
        
        Int rat1_num <- 0;
        Int rat1_den <- 0;
        Int rat2_num <- 0;
        Int rat2_den <- 0;
        
        print_string "üîß Criando primeiro n√∫mero racional...";
        criar_racional(r1_num, r1_den, &rat1_num, &rat1_den);
        print_string "   Resultado: ";
        imprimir_racional(rat1_num, rat1_den);
        print_string "";
        
        print_string "üîß Criando segundo n√∫mero racional...";
        criar_racional(r2_num, r2_den, &rat2_num, &rat2_den);
        print_string "   Resultado: ";
        imprimir_racional(rat2_num, rat2_den);
        print_string "";
            
        // =============================================================
        // M√ìDULO B: COMPARA√á√ÉO DE IGUALDADE
        // =============================================================
        
        print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
        print_string "                  M√ìDULO B: COMPARA√á√ÉO DE IGUALDADE";
        print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
        print_string "";
        
        Int sao_iguais <- 0;
        print_string "üîç Comparando os n√∫meros racionais...";
        comparar_igualdade(rat1_num, rat1_den, rat2_num, rat2_den, &sao_iguais);
        print_string "   Resultado: ";
        if (sao_iguais == 1) {
            print_string "SIM - s√£o iguais";
        }
        if (sao_iguais == 0) {
            print_string "N√ÉO - s√£o diferentes";
        }
        print_string "";
            
        // =============================================================
        // M√ìDULO C: OPERA√á√ïES ARITM√âTICAS
        // =============================================================
        
        print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
        print_string "                  M√ìDULO C: OPERA√á√ïES ARITM√âTICAS";
        print_string "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ";
        print_string "";
        
        // C.1: SOMA
        print_string "üßÆ OPERA√á√ÉO 1: SOMA";
        Int soma_num <- 0;
        Int soma_den <- 0;
        somar_racionais(rat1_num, rat1_den, rat2_num, rat2_den, &soma_num, &soma_den);
        print_string "   ";
        imprimir_racional(rat1_num, rat1_den);
        print_string " + ";
        imprimir_racional(rat2_num, rat2_den);
        print_string " = ";
        imprimir_racional(soma_num, soma_den);
        print_string "";
        
        // C.2: NEGA√á√ÉO
        print_string "üßÆ OPERA√á√ÉO 2: NEGA√á√ÉO";
        Int neg1_num <- 0;
        Int neg1_den <- 0;
        negar_racional(rat1_num, rat1_den, &neg1_num, &neg1_den);
        print_string "   -";
        imprimir_racional(rat1_num, rat1_den);
        print_string " = ";
        imprimir_racional(neg1_num, neg1_den);
        
        Int neg2_num <- 0;
        Int neg2_den <- 0;
        negar_racional(rat2_num, rat2_den, &neg2_num, &neg2_den);
        print_string "   -";
        imprimir_racional(rat2_num, rat2_den);
        print_string " = ";
        imprimir_racional(neg2_num, neg2_den);
        print_string "";
        
        // C.3: SUBTRA√á√ÉO
        print_string "üßÆ OPERA√á√ÉO 3: SUBTRA√á√ÉO";
        Int sub_num <- 0;
        Int sub_den <- 0;
        subtrair_racionais(rat1_num, rat1_den, rat2_num, rat2_den, &sub_num, &sub_den);
        print_string "   ";
        imprimir_racional(rat1_num, rat1_den);
        print_string " - ";
        imprimir_racional(rat2_num, rat2_den);
        print_string " = ";
        imprimir_racional(sub_num, sub_den);
        print_string "";
        
        // C.4: MULTIPLICA√á√ÉO
        print_string "üßÆ OPERA√á√ÉO 4: MULTIPLICA√á√ÉO";
        Int mult_num <- 0;
        Int mult_den <- 0;
        multiplicar_racionais(rat1_num, rat1_den, rat2_num, rat2_den, &mult_num, &mult_den);
        print_string "   ";
        imprimir_racional(rat1_num, rat1_den);
        print_string " √ó ";
        imprimir_racional(rat2_num, rat2_den);
        print_string " = ";
        imprimir_racional(mult_num, mult_den);
        print_string "";
        
        // C.5: INVERSO
        print_string "üßÆ OPERA√á√ÉO 5: INVERSO";
        Int inv1_num <- 0;
        Int inv1_den <- 0;
        inverter_racional(rat1_num, rat1_den, &inv1_num, &inv1_den);
        print_string "   Inverso de ";
        imprimir_racional(rat1_num, rat1_den);
        print_string " = ";
        imprimir_racional(inv1_num, inv1_den);
        
        Int inv2_num <- 0;
        Int inv2_den <- 0;
        inverter_racional(rat2_num, rat2_den, &inv2_num, &inv2_den);
        print_string "   Inverso de ";
        imprimir_racional(rat2_num, rat2_den);
        print_string " = ";
        imprimir_racional(inv2_num, inv2_den);
        print_string "";
        
        // C.6: DIVIS√ÉO
        print_string "üßÆ OPERA√á√ÉO 6: DIVIS√ÉO";
        Int div_num <- 0;
        Int div_den <- 0;
        dividir_racionais(rat1_num, rat1_den, rat2_num, rat2_den, &div_num, &div_den);
        print_string "   ";
        imprimir_racional(rat1_num, rat1_den);
        print_string " √∑ ";
        imprimir_racional(rat2_num, rat2_den);
        print_string " = ";
        imprimir_racional(div_num, div_den);
        print_string "";
        // =============================================================
        // FINALIZA√á√ÉO DO PROGRAMA
        // =============================================================
        
        print_string "";
        print_string "==================================================================";
        print_string "                      PROGRAMA FINALIZADO";
        print_string "==================================================================";
        print_string "";
        print_string "‚úÖ Todas as opera√ß√µes foram executadas com sucesso!";
        print_string "";
        print_string "     RESUMO DAS OPERA√á√ïES REALIZADAS:";
        print_string "   ‚Ä¢ Cria√ß√£o de n√∫meros racionais";
        print_string "   ‚Ä¢ Normaliza√ß√£o (denominador sempre positivo)";
        print_string "   ‚Ä¢ Compara√ß√£o de igualdade   ";
        print_string "   ‚Ä¢ Opera√ß√µes aritm√©ticas: soma, subtra√ß√£o, multiplica√ß√£o, divis√£o";
        print_string "   ‚Ä¢ Opera√ß√µes especiais: nega√ß√£o e inverso";

        
    }
    if (dados_validos == 0) {
        print_string "";
        print_string "==================================================================";
        print_string "                    PROGRAMA ENCERRADO COM ERRO";
        print_string "==================================================================";
        print_string "";
        print_string "‚ùå O programa foi encerrado devido a denominadores inv√°lidos.";
        print_string "";
        print_string "üìã REQUISITOS PARA EXECU√á√ÉO:";
        print_string "   ‚Ä¢ Denominadores devem ser n√∫meros inteiros n√£o-zero";
        print_string "   ‚Ä¢ Numeradores podem ser qualquer n√∫mero inteiro";
        print_string "   ‚Ä¢ Entrada deve conter exatamente 4 n√∫meros inteiros";
        print_string "";
        print_string "          Execute o programa novamente e insira";
        print_string "         denominadores v√°lidos (diferentes de zero).";
    }
}
