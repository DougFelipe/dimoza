// PROBLEMA 3: OPERAÇÕES COM MATRIZES - VERSÃO REFATORADA
// Demonstra operações fundamentais com matrizes em linguagem Dimoza
// - Entrada interativa de dados
// - Validação robusta de dimensões
// - Soma e multiplicação de matrizes
// - Exibição formatada de resultados
// - Modularização e organização melhorada

Unit main() {
    // =================================================================
    // CABEÇALHO E APRESENTAÇÃO DO PROGRAMA
    // =================================================================
    
    print_string "==================================================================";
    print_string "         OPERAÇÕES COM MATRIZES - LINGUAGEM DIMOZA";
    print_string "==================================================================";
    
    // =================================================================
    // ENTRADA E VALIDAÇÃO DAS DIMENSÕES DAS MATRIZES
    // =================================================================
    
    print_string "──────────────────────────────────────────────────────────────────";
    print_string "                    CONFIGURAÇÃO DAS MATRIZES";
    print_string "──────────────────────────────────────────────────────────────────";
    print_string "";
    
    // Entrada das dimensões da Matriz A
    print_string "🔢 CONFIGURAÇÃO DA MATRIZ A:";
    print_string "Digite o número de linhas da Matriz A (1-3):";
    Float entrada_linhas_A <- read();
    Int linhas_A <- entrada_linhas_A;
    
    print_string "Digite o número de colunas da Matriz A (1-3):";
    Float entrada_colunas_A <- read();
    Int colunas_A <- entrada_colunas_A;
    
    print_string "";
    print_string "🔢 CONFIGURAÇÃO DA MATRIZ B:";
    print_string "Digite o número de linhas da Matriz B (1-3):";
    Float entrada_linhas_B <- read();
    Int linhas_B <- entrada_linhas_B;
    
    print_string "Digite o número de colunas da Matriz B (1-3):";
    Float entrada_colunas_B <- read();
    Int colunas_B <- entrada_colunas_B;
    
    // =================================================================
    // VALIDAÇÃO DAS DIMENSÕES INSERIDAS
    // =================================================================
    
    print_string "";
    print_string "🔍 VALIDANDO DIMENSÕES...";
    print_string "";
    
    Int dimensoes_validas <- 1;
    
    // Validação da Matriz A
    if (linhas_A <= 0) {
        print_string "❌ ERRO: Número de linhas da Matriz A deve ser positivo!";
        dimensoes_validas <- 0;
    }
    if (linhas_A > 3) {
        print_string "❌ ERRO: Número de linhas da Matriz A não pode exceder 3!";
        dimensoes_validas <- 0;
    }
    if (colunas_A <= 0) {
        print_string "❌ ERRO: Número de colunas da Matriz A deve ser positivo!";
        dimensoes_validas <- 0;
    }
    if (colunas_A > 3) {
        print_string "❌ ERRO: Número de colunas da Matriz A não pode exceder 3!";
        dimensoes_validas <- 0;
    }
    
    // Validação da Matriz B
    if (linhas_B <= 0) {
        print_string "❌ ERRO: Número de linhas da Matriz B deve ser positivo!";
        dimensoes_validas <- 0;
    }
    if (linhas_B > 3) {
        print_string "❌ ERRO: Número de linhas da Matriz B não pode exceder 3!";
        dimensoes_validas <- 0;
    }
    if (colunas_B <= 0) {
        print_string "❌ ERRO: Número de colunas da Matriz B deve ser positivo!";
        dimensoes_validas <- 0;
    }
    if (colunas_B > 3) {
        print_string "❌ ERRO: Número de colunas da Matriz B não pode exceder 3!";
        dimensoes_validas <- 0;
    }
    
    // Continuar apenas se as dimensões são válidas
    if (dimensoes_validas == 1) {
        
        print_string "✅ Dimensões validadas com sucesso!";
        print_string "";
        print_string "📋 RESUMO DAS CONFIGURAÇÕES:";
        print_string "   Matriz A: ";
        print linhas_A;
        print_string " × ";
        print colunas_A;
        print_string "   Matriz B: ";
        print linhas_B;
        print_string " × ";
        print colunas_B;
        print_string "";
        
        // =============================================================
        // DECLARAÇÃO DAS VARIÁVEIS PARA ARMAZENAR AS MATRIZES
        // =============================================================
        
        // Matriz A - elementos (até 3×3)
        Float a11 <- 0.0; Float a12 <- 0.0; Float a13 <- 0.0;
        Float a21 <- 0.0; Float a22 <- 0.0; Float a23 <- 0.0;
        Float a31 <- 0.0; Float a32 <- 0.0; Float a33 <- 0.0;
        
        // Matriz B - elementos (até 3×3)
        Float b11 <- 0.0; Float b12 <- 0.0; Float b13 <- 0.0;
        Float b21 <- 0.0; Float b22 <- 0.0; Float b23 <- 0.0;
        Float b31 <- 0.0; Float b32 <- 0.0; Float b33 <- 0.0;
        
        // =============================================================
        // ENTRADA DOS ELEMENTOS DA MATRIZ A
        // =============================================================
        
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "                    ENTRADA DOS ELEMENTOS";
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "";
        print_string "📝 PREENCHENDO A MATRIZ A:";
        print_string "Digite os elementos linha por linha...";
        print_string "";
        
        // Leitura da linha 1 da Matriz A
        if (linhas_A >= 1) {
            print_string "🔹 Linha 1 da Matriz A:";
            if (colunas_A >= 1) {
                print_string "   A[1,1] = ";
                a11 <- read();
            }
            if (colunas_A >= 2) {
                print_string "   A[1,2] = ";
                a12 <- read();
            }
            if (colunas_A >= 3) {
                print_string "   A[1,3] = ";
                a13 <- read();
            }
            print_string "   ✅ Linha 1 preenchida!";
            print_string "";
        }
        
        // Leitura da linha 2 da Matriz A
        if (linhas_A >= 2) {
            print_string "🔹 Linha 2 da Matriz A:";
            if (colunas_A >= 1) {
                print_string "   A[2,1] = ";
                a21 <- read();
            }
            if (colunas_A >= 2) {
                print_string "   A[2,2] = ";
                a22 <- read();
            }
            if (colunas_A >= 3) {
                print_string "   A[2,3] = ";
                a23 <- read();
            }
            print_string "   ✅ Linha 2 preenchida!";
            print_string "";
        }
        
        // Leitura da linha 3 da Matriz A
        if (linhas_A >= 3) {
            print_string "🔹 Linha 3 da Matriz A:";
            if (colunas_A >= 1) {
                print_string "   A[3,1] = ";
                a31 <- read();
            }
            if (colunas_A >= 2) {
                print_string "   A[3,2] = ";
                a32 <- read();
            }
            if (colunas_A >= 3) {
                print_string "   A[3,3] = ";
                a33 <- read();
            }
            print_string "   ✅ Linha 3 preenchida!";
            print_string "";
        }
        
        print_string "✅ Matriz A preenchida com sucesso!";
        print_string "";
        
        // =============================================================
        // ENTRADA DOS ELEMENTOS DA MATRIZ B
        // =============================================================
        
        print_string "📝 PREENCHENDO A MATRIZ B:";
        print_string "Digite os elementos linha por linha...";
        print_string "";
        
        // Leitura da linha 1 da Matriz B
        if (linhas_B >= 1) {
            print_string "🔹 Linha 1 da Matriz B:";
            if (colunas_B >= 1) {
                print_string "   B[1,1] = ";
                b11 <- read();
            }
            if (colunas_B >= 2) {
                print_string "   B[1,2] = ";
                b12 <- read();
            }
            if (colunas_B >= 3) {
                print_string "   B[1,3] = ";
                b13 <- read();
            }
            print_string "   ✅ Linha 1 preenchida!";
            print_string "";
        }
        
        // Leitura da linha 2 da Matriz B
        if (linhas_B >= 2) {
            print_string "🔹 Linha 2 da Matriz B:";
            if (colunas_B >= 1) {
                print_string "   B[2,1] = ";
                b21 <- read();
            }
            if (colunas_B >= 2) {
                print_string "   B[2,2] = ";
                b22 <- read();
            }
            if (colunas_B >= 3) {
                print_string "   B[2,3] = ";
                b23 <- read();
            }
            print_string "   ✅ Linha 2 preenchida!";
            print_string "";
        }
        
        // Leitura da linha 3 da Matriz B
        if (linhas_B >= 3) {
            print_string "🔹 Linha 3 da Matriz B:";
            if (colunas_B >= 1) {
                print_string "   B[3,1] = ";
                b31 <- read();
            }
            if (colunas_B >= 2) {
                print_string "   B[3,2] = ";
                b32 <- read();
            }
            if (colunas_B >= 3) {
                print_string "   B[3,3] = ";
                b33 <- read();
            }
            print_string "   ✅ Linha 3 preenchida!";
            print_string "";
        }
        
        print_string "✅ Matriz B preenchida com sucesso!";
        print_string "";
        
        // =============================================================
        // EXIBIÇÃO DAS MATRIZES INSERIDAS
        // =============================================================
        
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "                    MATRIZES INSERIDAS";
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "";
        
        // Exibição da Matriz A
        print_string "📊 MATRIZ A:";
        print_string "┌─────────────────┐";
        
        if (linhas_A >= 1) {
            print_string "│ ";
            if (colunas_A >= 1) { print a11; print_string "  "; }
            if (colunas_A >= 2) { print a12; print_string "  "; }
            if (colunas_A >= 3) { print a13; print_string "  "; }
            print_string "│";
        }
        if (linhas_A >= 2) {
            print_string "│ ";
            if (colunas_A >= 1) { print a21; print_string "  "; }
            if (colunas_A >= 2) { print a22; print_string "  "; }
            if (colunas_A >= 3) { print a23; print_string "  "; }
            print_string "│";
        }
        if (linhas_A >= 3) {
            print_string "│ ";
            if (colunas_A >= 1) { print a31; print_string "  "; }
            if (colunas_A >= 2) { print a32; print_string "  "; }
            if (colunas_A >= 3) { print a33; print_string "  "; }
            print_string "│";
        }
        
        print_string "└─────────────────┘";
        print_string "";
        
        // Exibição da Matriz B
        print_string "📊 MATRIZ B:";
        print_string "┌─────────────────┐";
        
        if (linhas_B >= 1) {
            print_string "│ ";
            if (colunas_B >= 1) { print b11; print_string "  "; }
            if (colunas_B >= 2) { print b12; print_string "  "; }
            if (colunas_B >= 3) { print b13; print_string "  "; }
            print_string "│";
        }
        if (linhas_B >= 2) {
            print_string "│ ";
            if (colunas_B >= 1) { print b21; print_string "  "; }
            if (colunas_B >= 2) { print b22; print_string "  "; }
            if (colunas_B >= 3) { print b23; print_string "  "; }
            print_string "│";
        }
        if (linhas_B >= 3) {
            print_string "│ ";
            if (colunas_B >= 1) { print b31; print_string "  "; }
            if (colunas_B >= 2) { print b32; print_string "  "; }
            if (colunas_B >= 3) { print b33; print_string "  "; }
            print_string "│";
        }
        
        print_string "└─────────────────┘";
        print_string "";
        
        // =============================================================
        // OPERAÇÃO 1: SOMA DE MATRIZES (A + B)
        // =============================================================
        
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "                    OPERAÇÃO 1: SOMA DE MATRIZES";
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "";
        
        // Verificar se a soma é possível
        Int soma_possivel <- 0;
        if (linhas_A == linhas_B) {
            if (colunas_A == colunas_B) {
                soma_possivel <- 1;
            }
        }
        
        if (soma_possivel == 1) {
            print_string "✅ A soma é possível (matrizes de mesma dimensão)";
            print_string "";
            print_string "🔢 Calculando A + B...";
            print_string "";
            print_string "📊 RESULTADO DA SOMA (A + B):";
            print_string "┌─────────────────┐";
            
            // Calcular e exibir a soma linha por linha
            if (linhas_A >= 1) {
                print_string "│ ";
                if (colunas_A >= 1) { 
                    Float soma11 <- a11 + b11;
                    print soma11; print_string "  ";
                }
                if (colunas_A >= 2) { 
                    Float soma12 <- a12 + b12;
                    print soma12; print_string "  ";
                }
                if (colunas_A >= 3) { 
                    Float soma13 <- a13 + b13;
                    print soma13; print_string "  ";
                }
                print_string "│";
            }
            if (linhas_A >= 2) {
                print_string "│ ";
                if (colunas_A >= 1) { 
                    Float soma21 <- a21 + b21;
                    print soma21; print_string "  ";
                }
                if (colunas_A >= 2) { 
                    Float soma22 <- a22 + b22;
                    print soma22; print_string "  ";
                }
                if (colunas_A >= 3) { 
                    Float soma23 <- a23 + b23;
                    print soma23; print_string "  ";
                }
                print_string "│";
            }
            if (linhas_A >= 3) {
                print_string "│ ";
                if (colunas_A >= 1) { 
                    Float soma31 <- a31 + b31;
                    print soma31; print_string "  ";
                }
                if (colunas_A >= 2) { 
                    Float soma32 <- a32 + b32;
                    print soma32; print_string "  ";
                }
                if (colunas_A >= 3) { 
                    Float soma33 <- a33 + b33;
                    print soma33; print_string "  ";
                }
                print_string "│";
            }
            
            print_string "└─────────────────┘";
            print_string "";
            print_string "✅ Soma calculada com sucesso!";
            
        }
        if (soma_possivel == 0) {
            print_string "❌ A soma NÃO é possível!";
            print_string "";
            print_string "📋 MOTIVO: As matrizes devem ter as mesmas dimensões";
            print_string "   • Matriz A: ";
            print linhas_A;
            print_string " × ";
            print colunas_A;
            print_string "   • Matriz B: ";
            print linhas_B;
            print_string " × ";
            print colunas_B;
            print_string "";
            print_string "💡 DICA: Para somar matrizes, elas devem ter";
            print_string "          exatamente as mesmas dimensões.";
        }
        
        print_string "";
        
        // =============================================================
        // OPERAÇÃO 2: MULTIPLICAÇÃO DE MATRIZES (A × B)
        // =============================================================
        
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "                  OPERAÇÃO 2: MULTIPLICAÇÃO DE MATRIZES";
        print_string "──────────────────────────────────────────────────────────────────";
        print_string "";
        
        // Verificar se a multiplicação é possível
        Int produto_possivel <- 0;
        if (colunas_A == linhas_B) {
            produto_possivel <- 1;
        }
        
        if (produto_possivel == 1) {
            print_string "✅ A multiplicação é possível!";
            print_string "";
            print_string "📐 Dimensão do resultado: ";
            print linhas_A;
            print_string " × ";
            print colunas_B;
            print_string "";
            print_string "🔢 Calculando A × B...";
            print_string "";
            print_string "📊 RESULTADO DA MULTIPLICAÇÃO (A × B):";
            print_string "┌─────────────────┐";
            
            // Calcular e exibir o produto linha por linha
            if (linhas_A >= 1) {
                print_string "│ ";
                if (colunas_B >= 1) {
                    Float prod11 <- 0.0;
                    if (colunas_A >= 1) { prod11 <- prod11 + (a11 * b11); }
                    if (colunas_A >= 2) { prod11 <- prod11 + (a12 * b21); }
                    if (colunas_A >= 3) { prod11 <- prod11 + (a13 * b31); }
                    print prod11; print_string "  ";
                }
                if (colunas_B >= 2) {
                    Float prod12 <- 0.0;
                    if (colunas_A >= 1) { prod12 <- prod12 + (a11 * b12); }
                    if (colunas_A >= 2) { prod12 <- prod12 + (a12 * b22); }
                    if (colunas_A >= 3) { prod12 <- prod12 + (a13 * b32); }
                    print prod12; print_string "  ";
                }
                if (colunas_B >= 3) {
                    Float prod13 <- 0.0;
                    if (colunas_A >= 1) { prod13 <- prod13 + (a11 * b13); }
                    if (colunas_A >= 2) { prod13 <- prod13 + (a12 * b23); }
                    if (colunas_A >= 3) { prod13 <- prod13 + (a13 * b33); }
                    print prod13; print_string "  ";
                }
                print_string "│";
            }
            
            if (linhas_A >= 2) {
                print_string "│ ";
                if (colunas_B >= 1) {
                    Float prod21 <- 0.0;
                    if (colunas_A >= 1) { prod21 <- prod21 + (a21 * b11); }
                    if (colunas_A >= 2) { prod21 <- prod21 + (a22 * b21); }
                    if (colunas_A >= 3) { prod21 <- prod21 + (a23 * b31); }
                    print prod21; print_string "  ";
                }
                if (colunas_B >= 2) {
                    Float prod22 <- 0.0;
                    if (colunas_A >= 1) { prod22 <- prod22 + (a21 * b12); }
                    if (colunas_A >= 2) { prod22 <- prod22 + (a22 * b22); }
                    if (colunas_A >= 3) { prod22 <- prod22 + (a23 * b32); }
                    print prod22; print_string "  ";
                }
                if (colunas_B >= 3) {
                    Float prod23 <- 0.0;
                    if (colunas_A >= 1) { prod23 <- prod23 + (a21 * b13); }
                    if (colunas_A >= 2) { prod23 <- prod23 + (a22 * b23); }
                    if (colunas_A >= 3) { prod23 <- prod23 + (a23 * b33); }
                    print prod23; print_string "  ";
                }
                print_string "│";
            }
            
            if (linhas_A >= 3) {
                print_string "│ ";
                if (colunas_B >= 1) {
                    Float prod31 <- 0.0;
                    if (colunas_A >= 1) { prod31 <- prod31 + (a31 * b11); }
                    if (colunas_A >= 2) { prod31 <- prod31 + (a32 * b21); }
                    if (colunas_A >= 3) { prod31 <- prod31 + (a33 * b31); }
                    print prod31; print_string "  ";
                }
                if (colunas_B >= 2) {
                    Float prod32 <- 0.0;
                    if (colunas_A >= 1) { prod32 <- prod32 + (a31 * b12); }
                    if (colunas_A >= 2) { prod32 <- prod32 + (a32 * b22); }
                    if (colunas_A >= 3) { prod32 <- prod32 + (a33 * b32); }
                    print prod32; print_string "  ";
                }
                if (colunas_B >= 3) {
                    Float prod33 <- 0.0;
                    if (colunas_A >= 1) { prod33 <- prod33 + (a31 * b13); }
                    if (colunas_A >= 2) { prod33 <- prod33 + (a32 * b23); }
                    if (colunas_A >= 3) { prod33 <- prod33 + (a33 * b33); }
                    print prod33; print_string "  ";
                }
                print_string "│";
            }
            
            print_string "└─────────────────┘";
            print_string "";
            print_string "✅ Multiplicação calculada com sucesso!";
            
        }
        if (produto_possivel == 0) {
            print_string "❌ A multiplicação NÃO é possível!";
            print_string "";
            print_string "📋 MOTIVO: O número de colunas de A deve ser igual";
            print_string "          ao número de linhas de B";
            print_string "";
            print_string "   • Matriz A tem ";
            print colunas_A;
            print_string " colunas";
            print_string "   • Matriz B tem ";
            print linhas_B;
            print_string " linhas";
            print_string "";
            print_string "💡 CONDIÇÃO: Para multiplicar A × B, precisamos:";
            print_string "             colunas(A) = linhas(B)";
        }
        
        // =============================================================
        // FINALIZAÇÃO DO PROGRAMA
        // =============================================================
        
        print_string "";
        print_string "==================================================================";
        print_string "                      PROGRAMA FINALIZADO";
        print_string "==================================================================";
        print_string "";
        print_string "✅ Todas as operações foram executadas com sucesso!";
        print_string "";
        print_string "📊 RESUMO DAS OPERAÇÕES REALIZADAS:";
        print_string "   • Entrada interativa de matrizes";
        print_string "   • Validação de dimensões";
        print_string "   • Verificação de compatibilidade para operações";
        print_string "   • Cálculo de soma de matrizes";
        print_string "   • Cálculo de multiplicação de matrizes";
        print_string "   • Exibição formatada de resultados";
        print_string "";
        print_string "🎓 CONCEITOS DEMONSTRADOS:";
        print_string "   • Álgebra linear computacional";
        print_string "   • Estruturas de controle condicionais";
        print_string "   • Manipulação de dados estruturados";
        print_string "   • Validação robusta de entrada";
        print_string "   • Modularização de código";
        print_string "";
        print_string "Obrigado por usar o programa de Operações com Matrizes!";
        
    }
    if (dimensoes_validas == 0) {
        print_string "";
        print_string "==================================================================";
        print_string "                    PROGRAMA ENCERRADO COM ERRO";
        print_string "==================================================================";
        print_string "";
        print_string "❌ O programa foi encerrado devido a dimensões inválidas.";
        print_string "";
        print_string "📋 REQUISITOS PARA EXECUÇÃO:";
        print_string "   • Dimensões devem ser números inteiros positivos";
        print_string "   • Dimensões devem estar entre 1 e 3 (inclusive)";
        print_string "   • Tanto linhas quanto colunas devem ser válidas";
        print_string "";
        print_string "💡 DICA: Execute o programa novamente e insira";
        print_string "         valores válidos para as dimensões.";
    }
}
